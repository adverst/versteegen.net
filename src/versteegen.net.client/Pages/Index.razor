@page "/"
@page "/{CurrentPageName}"
@using versteegen.net.client.Components.UI
@using versteegen.net.client.Model
@using versteegen.net.client.Components.UI.Markdown
@using System.Net
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JS

<!--Container-->
<div class="container w-full md:max-w-3xl mx-auto pt-20">

    <div class="w-full px-4 md:px-6 text-xl text-gray-800 leading-normal" style="font-family:Georgia,serif;">

        <!--Post Content-->
        <!--Lead Para-->
        <p class="py-6">
            👋 Hi
        </p>

        <MarkdownView MarkdownString="@CurrentPage?.Content"></MarkdownView>

        <Blockquote AuthorString="-Wayne Gretzky -Michael Scott">
            You miss 100% of the shots you don't take
        </Blockquote>


        <!--/ Post Content-->

    </div>



    <!--Divider-->
    <hr class="border-b-2 border-gray-400 mb-8 mx-4">



    <Author></Author>




    <!--Divider-->
    <hr class="border-b-2 border-gray-400 mb-8 mx-4">

    <NextAndPrevious CurrentPageNode="@CurrentNode"></NextAndPrevious>

</div>
<!--/container-->
@code
{

    private LinkedList<MarkdownPage> AllPages { get; set; } = new LinkedList<MarkdownPage>();
    private MarkdownPage? CurrentPage { get; set; }
    private LinkedListNode<MarkdownPage>? CurrentNode { get; set; } = null;

    [Parameter]
    public string CurrentPageName { get; set; } = "";

    protected MarkupString GetcodeString()
    {
        return (MarkupString)">++++++++[<+++++++++>-]<.>++++[<+++++++>-]<+.+++++++..+++.>>++++++[<+++++++>-]<++.------------.>++++++[<+++++++++>-]<+.<.+++.------.--------.>>>++++[<++++++++>-]<+.";
    }

    protected override async Task OnInitializedAsync()
    {
        await BuildIndex();
        await GetCurrentNode();

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCurrentNode();
        StateHasChanged();
    }

    public async Task GetCurrentNode()
    {
        if (CurrentPage == null)
            await BuildIndex();

        if (CurrentPage == null) return;

        var nodeByName = AllPages.FirstOrDefault(x => x.PageName == CurrentPageName);

        if (nodeByName != null)
        {

            CurrentNode = AllPages.Find(nodeByName);
        }
        else
        {
            CurrentNode = AllPages.Last;
        }

        CurrentPage = CurrentNode?.Value;

        StateHasChanged();
        await JS.InvokeVoidAsync("hljs.highlightAll");
    }

    public async Task BuildIndex()
    {
        AllPages.Clear();

        await AddPageToIndex("p1");
        await AddPageToIndex("testPage1");
        await AddPageToIndex("testPage2");

        StateHasChanged();
    }

    public async Task AddPageToIndex(string url)
    {
        var page = await Http.GetStringAsync($"md/{url}.md?nocache={Guid.NewGuid()}");

        var newPage = new MarkdownPage()
            {
                Content = page,
                Uri = url,
                PageName = url
            };

        CurrentPage = newPage;

        AllPages.AddLast(newPage);
    }

}

